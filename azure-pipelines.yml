# Analytics Ops Accelerator Base Docker images builder Azure Pipeline

# This Pipeline should be used to generate the docker images of the project and should be triggered manually.
# Change the Pipeline Variables in the UI to match your needs
# DOCKER_ENABLE_RUN: enables or disables the build. Values: true, false
# DOCKER_IMAGE_NAME: name for the new docker image, same as the dockerfile. String
# DOCKER_IMAGE_TAG: tag for the new docker image. String
# DOCKER_REPOSITORY_URI: Uri of the repository (without the image name)

trigger:
  branches:
    exclude:
      - '*'

variables:
  - group: dev
  - name: newImageAccount
    value: '$(DOCKER_REPOSITORY_URI)'
  - name: newImageRepo
    value: '$(DOCKER_IMAGE_NAME)'
  - name: newImageVersion
    value: '$(DOCKER_IMAGE_TAG)'
  - name: isPrivateRepo
    value: '$(IS_PRIVATE_REPO)'

stages:
  - stage: BaseDockerBuilder
    displayName: 'Build Base Docker Image'
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: BuildPushDocker
        displayName: 'Build and push docker image'
        condition: eq(variables['DOCKER_ENABLE_RUN'], 'true')
        steps:
          - task: CmdLine@2
            displayName: 'Building base image $(newImageAccount)/$(newImageRepo):$(newImageVersion)'
            inputs:
              script: |
                echo "Building base image $(newImageAccount)/$(newImageRepo):$(newImageVersion) from file \"$(newImageRepo)\""
                export WORKING_DIR=$(pwd)
                echo "##vso[task.setvariable variable=WORKING_DIR]$WORKING_DIR"
          - script: |
              aws ecr-public get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(newImageAccount)
            condtition: eq($isPrivateRepo, 'false')
            displayName: 'Login to AWS'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          - script: |
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $(newImageAccount)
            condtition: eq($isPrivateRepo, 'true')
            displayName: 'Login to AWS'
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
          - task: Docker@2
            displayName: 'Build and push docker image'
            inputs:
              command: buildAndPush
              Dockerfile: '$(newImageRepo)'
              repository: '$(newImageAccount)/$(newImageRepo)'
              buildContext: $(WORKING_DIR)
              tags: |
                latest
                $(newImageVersion)
